# This action deploys changes to the eligibility screener next.js application. 
#
# Deploy steps:
# - Build and tag a docker release image
# - Upload the docker image to ECR
# - Trigger a rotation of the ECS service containers
# - Automatically tag the branch with the environment name
#
# The underlying terraform is managed in the wic-mt-demo-project repo and references the uploaded docker image.

name: Eligibility Screener Deploy
on:
  workflow_dispatch:
    inputs:
      environment:
        required: true
        default_value: "test"
        description: |
          Choose an environment to deploy changes to.
        type: choice
        options:
          - test
          - stage
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Deploy Screener
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Authenticate with AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: arn:aws:iam::546642427916:role/deployment-action
          role-duration-seconds: 3600

      - name: Build and Tag Image
        run: |
          docker build --tag 546642427916.dkr.ecr.us-east-1.amazonaws.com/eligibility-screener-repo:latest-${{github.event.inputs.environment || 'test' }} ./app
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 546642427916.dkr.ecr.us-east-1.amazonaws.com/eligibility-screener-repo
          docker push 546642427916.dkr.ecr.us-east-1.amazonaws.com/eligibility-screener-repo:latest-${{github.event.inputs.environment || 'test' }}

      - name: Push to ECR
        run: |
          aws ecs update-service --cluster ${{github.event.inputs.environment || 'test' }} --service ${{github.event.inputs.environment || 'test' }}-screener-ecs-service --force-new-deployment

      - name: Wait for stable ECS service
        run: |
          CLUSTER_ARN=$(aws ecs describe-clusters --clusters ${{github.event.inputs.environment || 'test' }} --query 'clusters[*]['clusterArn']' --output text)
          SERVICE_ID=${{github.event.inputs.environment || 'test' }}-api-ecs-service

          # wait for ECS service to be stable
          aws ecs wait services-stable --cluster $CLUSTER_ARN --services $SERVICE_ID

  create-tag:
    needs: [build]
    name: Create Github Tag
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      # https://github.com/rickstaa/action-create-tag
      - uses: rickstaa/action-create-tag@v1
        with:
          tag: "deployed/${{github.event.inputs.environment || 'test' }}"
          message: "from branch ${{github.ref_name}}\nTag created in workflow:\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          force_push_tag: true